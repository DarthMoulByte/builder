#!/bin/bash

# receive one package to be built from the build-list whose dependencies
# are already satisfied or which breaks a dependency cycle

# exit code shows state of success:
#  0: ok, I gave you an assignment
#  1: come back (shortly) later - I was running already
#  2: come back later - there are still packages to be built,
#     but currently none has all its dependencies ready
#  3: come back after the next run of get-package-updates - currently
#     there are no pending packages
#  4: come back, when you've done your work - you hit the limit on
#     maximum allowed parallel jobs per ip

# TODO:
#  respect build-manually-list

. "${0%/*}/../conf/default.conf"

mkdir -p "${work_dir}/package-states"

hand_out_assignment() {

  if [ -f "${work_dir}/package-states/$1.$2.$3.locked" ]; then
    return 0
  fi

  echo "$1 $2 $3"
  echo "${SSH_CLIENT%% *}" > "${work_dir}/package-states/$1.$2.$3.locked"

  rm -f "${lock_file}"
  exit 0

}

# Create a lock file.

exec 9> "${lock_file}"
if ! flock -n 9; then
  >&2 echo 'come back (shortly) later - I was running already'
  exit 1
fi

# Check if there are any pending packages at all and if the requester
# has already hit its max_parallel_build_per_client limit.

num_jobs=0
pending_packages=false

while read -r package git_revision repository; do

  if [ -f "${work_dir}/package-states/${package}.${git_revision}.${repository}.locked" ];
  then
    if [ "${SSH_CLIENT%% *}" = "$(cat "${work_dir}/package-states/${package}.${git_revision}.${repository}.locked")" ]; then
      num_jobs=$[${num_jobs}+1];
    fi
  else
    pending_packages=true
  fi

done < "${work_dir}/build-list"

if ! ${pending_packages}; then
  >&2 echo 'come back after the next run of get-package-updates - currently there are no pending packages'
  rm -f "${lock_file}"
  exit 3
fi

if [ ${num_jobs} -ge ${max_parallel_build_per_client} ]; then
  >&2 echo "come back, when you've done your work - you hit the limit on maximum allowed parallel jobs per ip"
  rm -f "${lock_file}"
  exit 4
fi

# Find first package of build-list whose dependencies are all met

while read -r package git_revision repository; do

  [ -z "$(
    (
      cat "${work_dir}/package-infos/${package}."*".needs"
      awk '{print $1}' "${work_dir}/build-list"
    ) | \
      sort | \
      uniq -d
    )" ] || continue

  hand_out_assignment "${package}" "${git_revision}" "${repository}"

done < "${work_dir}/build-list"

# Find first package which breaks a loop and is not locked

if [ -s "${work_dir}/tsort.error" ]; then

  grep -A1 '^tsort: -: input contains a loop:$' "${work_dir}/tsort.error" | \
    cut -d' ' -f2 | \
    grep -v -- '^-:$' | \
    while read package; do

      grep "^${package} " "${work_dir}/build-list" | \
        while read -r package git_revision repository; do
          hand_out_assignment "${package}" "${git_revision}" "${repository}"
        done

    done

fi

# Remove the lock file

>&2 echo 'come back later - there are still packages to be built, but currently none has all its dependencies ready'
rm -f "${lock_file}"
exit 2
