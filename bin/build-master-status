#!/bin/sh

# report about status of build master

. "${0%/*}/../conf/default.conf"

usage() {
  >&2 echo ''
  >&2 echo 'build-master-status: report about status of build master'
  >&2 echo ''
  >&2 echo 'possible options:'
  >&2 echo '  -w|--web:'
  >&2 echo '    Output to webserver instead of stdout.'
  >&2 echo '  -h|--help:'
  >&2 echo '    Show this help and exit.'
  [ -z "$1" ] && exit 1 || exit $1
}

eval set -- "$(
  getopt -o hw \
    --long help \
    --long web \
    -n "$(basename "$0")" -- "$@" || \
  echo usage
)"

web=false

while true
do
  case "$1" in
    -h|--help)
      usage 0
    ;;
    -w|--web)
      web=true
    ;;
    --)
      shift
      break
    ;;
    *)
      >&2 echo 'Whoops, forgot to implement option "'"$1"'" internally.'
      exit 42
    ;;
  esac
  shift
done

if [ $# -ne 0 ]; then
  >&2 echo 'Too many arguments.'
  usage
fi

stable=$(
  ls_master_mirror 'i686' | \
    grep -v 'testing$\|staging$\|-unstable$' | \
    while read -r dir; do
      ls_master_mirror "i686/${dir}"
    done | \
    grep -c '\.pkg\.tar\.xz$'
)
tasks=$(
  grep -c '^\S\+ \S\+ \S\+ \S\+$' \
    "${work_dir}/build-list"
) || true
pending_packages=$(
  grep '^\S\+ \S\+ \S\+ \S\+$' "${work_dir}/build-list" | \
    tr ' ' '.' | \
    while read -r package; do
      generate_package_metadata "${package}" 2>&1 > /dev/null
      cat "${work_dir}/package-infos/${package}.packages"
    done |
    wc -l
)
staging=$(
  ls_master_mirror 'i686' | \
    grep 'staging$' | \
    while read -r dir; do
      ls_master_mirror "i686/${dir}"
    done | \
    grep -c '\.pkg\.tar\.xz$'
  )
testing=$(
  ls_master_mirror 'i686' | \
    grep 'testing$' | \
    while read -r dir; do
      ls_master_mirror "i686/${dir}"
    done | \
    grep -c '\.pkg\.tar\.xz$'
  )
broken=$(
  ls "${work_dir}/package-states/" | \
    grep -c '\.broken$'
  ) || true
blocked=$(
  ls "${work_dir}/package-states/" | \
    grep -c '\.blocked$'
  ) || true
locked=$(
  ls "${work_dir}/package-states/" | \
    grep -c '\.locked$'
  ) || true
loops=$(
  ls "${work_dir}/build-list.loops" | \
    grep -c '^loop_[0-9]\+$'
  ) || true
looped_packages=$(
  ls "${work_dir}/build-list.loops" | \
    grep '^loop_[0-9]\+$' | \
    sed "s|^|${work_dir}/build-list.loops/|" | \
    xargs -r cat | \
    sort -u | \
    wc -l
  )

tmp_dir=$(mktemp -d)
trap 'rm -rf --one-file-system "${tmp_dir}"' EXIT

printf 'The mirror master contains %d stable packages (vs. ca. %d planned).\n' \
  "${stable}" \
  "$((${staging}+${testing}+${pending_packages}))" >> \
  "${tmp_dir}/build-master-status.html"
printf 'The build list contains %d tasks (incl. broken: %d, leading to %d packages).\n' \
  "$((${tasks}-${broken}))" \
  "${tasks}" \
  "${pending_packages}" >> \
  "${tmp_dir}/build-master-status.html"
printf 'There are %d testing and %d staging packages.\n' \
  "${testing}" \
  "${staging}" >> \
  "${tmp_dir}/build-master-status.html"
printf 'There are %d broken package builds.\n' \
  "${broken}" >> \
  "${tmp_dir}/build-master-status.html"
if [ "${loops}" -ne 0 ]; then
  printf 'There are %d loops containing %d package builds.\n' \
    "${loops}" \
    "${looped_packages}" >> \
    "${tmp_dir}/build-master-status.html"
fi
if [ $((${broken}+${testing}+${staging})) -ne 0 ]; then
  printf '%.1f%% of all packages are broken.\n' \
    "$(
      echo "scale=10; 100*${broken}/(${broken}+${testing}+${staging})" | \
        bc
    )" >> \
    "${tmp_dir}/build-master-status.html"
fi
if [ $((${testing}+${staging}+${pending_packages}-${broken})) -ne 0 ]; then
  printf '%.1f%% of the planned work has been done.\n' \
    "$(
      echo "scale=10; 100*(${testing}+${staging})/(${testing}+${staging}+${pending_packages}-${broken})" | \
        bc
    )" >> \
    "${tmp_dir}/build-master-status.html"
fi

if ${web}; then
  (
    [ -f "${webserver_directory}/statistics" ] && \
      cat "${webserver_directory}/statistics"
    printf '%s ' \
      "$(date +%s)" \
      "${stable}" \
      "${tasks}" \
      "${pending_packages}" \
      "${staging}" \
      "${testing}" \
      "${broken}" \
      "${loops}" \
      "${looped_packages}" \
      "${locked}" \
      "${blocked}" | \
      sed 's| $|\n|'
  ) | \
    tail -n 10080 > \
    "${tmp_dir}/statistics"

  printf '<html>\n<body>\n<a href="build-logs/">build logs</a><br>\n<table>\n<tr>' >> \
    "${tmp_dir}/broken-packages.html"
  printf '<th>%s</th>' \
    'package' \
    'git revision' \
    'modification git revision' \
    'package repository' \
    'compilations' \
    'blocked' >> \
    "${tmp_dir}/broken-packages.html"
  printf '</tr>\n' >> \
    "${tmp_dir}/broken-packages.html"
  ls "${work_dir}/package-states" | \
    grep '\.broken$' | \
    sed 's|\.broken$||' | \
    sed 's|^\(\(.\+\)\.\([^.]\+\)\.\([^.]\+\)\.\([^.]\+\)\)$|\1 \2 \3 \4 \5|' | \
    while read -r sf pkg rev mod_rev repo; do
      printf '%s ' \
        "${pkg}" \
        "${rev}" \
        "${mod_rev}" \
        "${repo}" \
        "$(wc -l < "${work_dir}/package-states/${sf}.broken")"
      if [ -f "${work_dir}/package-states/${sf}.blocked" ]; then
        tr '\n' ' ' < "${work_dir}/package-states/${sf}.blocked" | \
          sed 's|FS#\([0-9]\+\)|<a href="https://bugs.archlinux.org/task/\1">FS#\1</a>|'
      else
        printf '&nbsp;'
      fi
      printf '\n'
    done | \
    sort -k5n,5 | \
    while read -r pkg rev mod_rev repo count reason; do
      printf '<tr>'
      printf '<td>%s</td>' \
        '<a href="graphs/'"${pkg}"'.png">'"${pkg}"'</a>' \
        "${rev}" \
        "${mod_rev}" \
        "${repo}" \
        "${count}" \
        "${reason}"
      printf '</tr>\n'
    done >> \
    "${tmp_dir}/broken-packages.html"
  printf '</table>\n</body>\n</html>\n' >> \
    "${tmp_dir}/broken-packages.html"

  ls "${tmp_dir}" | \
    while read -r file; do
      cat "${tmp_dir}/${file}" > \
        "${webserver_directory}/${file}"
    done

else
  cat "${tmp_dir}/build-master-status.html"
fi
